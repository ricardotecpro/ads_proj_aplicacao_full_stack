# ===================================================================
# CONFIGURACAO DO SERVIDOR WEB EMBUTIDO (TOMCAT)
# ===================================================================
# Define a porta em que a aplicacao backend sera executada.
# O padrao e 8080. Usar 8088 evita conflitos com outras aplicacoes.
server.port=8088

# Define um prefixo para todos os endpoints da aplicacao.
# Ajuda a organizar as rotas e a evitar colisoes, especialmente em ambientes com proxy.
# Ex: http://localhost:8088/api/tarefas em vez de http://localhost:8088/tarefas
#server.servlet.context-path=/api

# ===================================================================
# CONFIGURACAO DO BANCO DE DADOS (DATASOURCE)
# ===================================================================
# URL de conexao para o banco de dados em memoria H2.
# 'mem' indica que e em memoria (dados sao perdidos ao reiniciar).
# 'tarefasdb' e o nome do banco de dados.
spring.datasource.url=jdbc:h2:mem:tarefasdb

# Driver JDBC para o H2. O Spring Boot geralmente o detecta automaticamente.
spring.datasource.driverClassName=org.h2.Driver

# Nome de usuario para acessar o banco de dados H2.
# 'sa' e o padrao (System Administrator).
spring.datasource.username=sa

# Senha para o banco de dados H2.
# Para desenvolvimento, uma senha em branco e comum.
spring.datasource.password=

# ===================================================================
# CONFIGURACAO DO H2 CONSOLE (INTERFACE WEB PARA O BANCO DE DADOS)
# ===================================================================
# Habilita o console web do H2, uma ferramenta util para visualizar
# e manipular os dados do banco diretamente no navegador.
spring.h2.console.enabled=true

# Define o caminho para acessar o console H2.
# Voce podera acessa-lo em: http://localhost:8088/api/h2-console
spring.h2.console.path=/h2-console

# ===================================================================
# CONFIGURACAO DO JPA (JAVA PERSISTENCE API) E HIBERNATE
# ===================================================================
# Dialeto do banco de dados que o Hibernate (implementacao JPA do Spring) deve usar.
# Isso permite que o Hibernate gere o SQL correto para o H2.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Acao a ser tomada no schema do banco de dados na inicializacao.
# 'create-drop': Cria o schema (tabelas) quando a aplicacao inicia e o destroi quando a aplicacao para.
# Perfeito para desenvolvimento, pois garante um ambiente limpo a cada reinicio.
# Outras opcoes: 'update', 'validate', 'none'.
spring.jpa.hibernate.ddl-auto=create-drop

# Mostra no console o SQL gerado pelo Hibernate.
# Extremamente util para depuracao e para entender o que esta acontecendo no banco de dados.
spring.jpa.show-sql=true

# Formata o SQL exibido no console para ser mais legivel.
spring.jpa.properties.hibernate.format_sql=true
